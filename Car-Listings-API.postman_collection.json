{
  "info": {
    "name": "Car Listings Service API - Complete",
    "description": "Complete API testing collection for Car Listings microservice including database setup, user management, and all endpoints.\n\nüî¥ IMPORTANT: Before testing, you MUST set up test users in the database!\n\nüìã Setup Instructions:\n1. Start the service: mvn spring-boot:run\n2. Access H2 Console: http://localhost:8081/h2-console\n3. Use connection details:\n   - JDBC URL: jdbc:h2:mem:carlistingsdb\n   - Username: sa\n   - Password: password\n4. Run the SQL from the 'Database Setup' folder\n5. Test the APIs using the provided requests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8081",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "carId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "searchId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üóÑÔ∏è Database Setup",
      "description": "SQL queries to set up test users in H2 database. Copy and paste these into H2 Console.",
      "item": [
        {
          "name": "üìã Setup Instructions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/h2-console",
              "host": ["{{baseUrl}}"],
              "path": ["h2-console"]
            },
            "description": "üîó H2 Console Access Instructions:\n\n1. Open: http://localhost:8081/h2-console\n2. Connection Settings:\n   - JDBC URL: jdbc:h2:mem:carlistingsdb\n   - Username: sa  \n   - Password: password\n3. Click 'Connect'\n4. Copy the SQL from the requests below and run them\n\n‚ö†Ô∏è This must be done before testing any car listings APIs!"
          }
        },
        {
          "name": "üèóÔ∏è Create Test Users - SQL",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test-setup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test-setup"]
            },
            "description": "üìù Copy this SQL and run in H2 Console:\n\n```sql\n-- Create test users for Car Listings Service\nINSERT INTO users (username, first_name, last_name, email, phone_number, password, role, active, created_at, updated_at) VALUES \n('johndoe', 'John', 'Doe', 'john.doe@example.com', '+61400123456', 'password123', 'SELLER', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),\n('janesmith', 'Jane', 'Smith', 'jane.smith@example.com', '+61400987654', 'password123', 'BOTH', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),\n('bobbuyer', 'Bob', 'Johnson', 'bob.johnson@example.com', '+61400555777', 'password123', 'BUYER', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);\n\n-- Verify users were created\nSELECT id, username, first_name, last_name, email, role FROM users;\n```\n\n‚úÖ After running this SQL, you should see 3 users with IDs 1, 2, 3"
          }
        },
        {
          "name": "üîç Verify Users - SQL",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/verify-users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "verify-users"]
            },
            "description": "üìä Run this SQL in H2 Console to check users:\n\n```sql\n-- Check if users exist\nSELECT id, username, first_name, last_name, email, role, active FROM users ORDER BY id;\n\n-- Count total users\nSELECT COUNT(*) as total_users FROM users;\n```\n\n‚úÖ Expected Result: 3 users with IDs 1, 2, 3"
          }
        }
      ]
    },
    {
      "name": "üöó Car Listings",
      "description": "Car listing management endpoints - create, read, update, delete car listings",
      "item": [
        {
          "name": "‚úÖ Create Car Listing (User 1)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "1",
                "description": "John Doe - Seller"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"make\": \"Toyota\",\n  \"model\": \"Camry\",\n  \"year\": 2020,\n  \"mileage\": 25000,\n  \"condition\": \"EXCELLENT\",\n  \"askingPrice\": 22000.00,\n  \"description\": \"Well-maintained sedan with full service history\",\n  \"color\": \"Silver\",\n  \"fuelType\": \"Gasoline\",\n  \"transmission\": \"Automatic\",\n  \"numberOfDoors\": 4,\n  \"engineSize\": \"2.5L\",\n  \"location\": \"Sydney, NSW\",\n  \"contactPhone\": \"+61400123456\",\n  \"contactEmail\": \"seller@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cars",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars"]
            },
            "description": "Creates a new car listing for User 1 (John Doe). \n\n‚ö†Ô∏è Requires: User with ID 1 must exist in database\n\n‚úÖ Valid conditions: NEW, EXCELLENT, VERY_GOOD, GOOD, FAIR, POOR"
          }
        },
        {
          "name": "‚úÖ Create Honda Civic (User 2)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "2",
                "description": "Jane Smith - Both Seller/Buyer"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"make\": \"Honda\",\n  \"model\": \"Civic\",\n  \"year\": 2019,\n  \"mileage\": 35000,\n  \"condition\": \"GOOD\",\n  \"askingPrice\": 18500.00,\n  \"description\": \"Reliable compact car, great fuel economy\",\n  \"color\": \"Blue\",\n  \"fuelType\": \"Gasoline\",\n  \"transmission\": \"Manual\",\n  \"numberOfDoors\": 4,\n  \"engineSize\": \"1.5L\",\n  \"location\": \"Melbourne, VIC\",\n  \"contactPhone\": \"+61400987654\",\n  \"contactEmail\": \"honda.seller@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cars",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars"]
            }
          }
        },
        {
          "name": "‚úÖ Create Ford Focus (User 2)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "2"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"Focus\",\n  \"year\": 2021,\n  \"mileage\": 15000,\n  \"condition\": \"EXCELLENT\",\n  \"askingPrice\": 24000.00,\n  \"description\": \"Nearly new hatchback with warranty\",\n  \"color\": \"Red\",\n  \"fuelType\": \"Gasoline\",\n  \"transmission\": \"Automatic\",\n  \"numberOfDoors\": 5,\n  \"engineSize\": \"2.0L\",\n  \"location\": \"Brisbane, QLD\",\n  \"contactPhone\": \"+61400555777\",\n  \"contactEmail\": \"ford.seller@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cars",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars"]
            }
          }
        },
        {
          "name": "üìã Get All Cars (Paginated)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars?page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Gets all active car listings with pagination"
          }
        },
        {
          "name": "üîç Get Car by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "1"]
            },
            "description": "Get specific car listing by ID. Change the ID in the URL to test different cars."
          }
        },
        {
          "name": "‚úèÔ∏è Update Car Listing",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "1",
                "description": "Must be the owner of the car"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"make\": \"Toyota\",\n  \"model\": \"Camry\",\n  \"year\": 2020,\n  \"mileage\": 26000,\n  \"condition\": \"EXCELLENT\",\n  \"askingPrice\": 21500.00,\n  \"description\": \"Well-maintained sedan with full service history - Price Reduced!\",\n  \"color\": \"Silver\",\n  \"fuelType\": \"Gasoline\",\n  \"transmission\": \"Automatic\",\n  \"numberOfDoors\": 4,\n  \"engineSize\": \"2.5L\",\n  \"location\": \"Sydney, NSW\",\n  \"contactPhone\": \"+61400123456\",\n  \"contactEmail\": \"seller@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cars/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "1"]
            },
            "description": "Update car with ID 1. Only the car owner can update their listing."
          }
        },
        {
          "name": "üö´ Deactivate Car Listing",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "User-Id",
                "value": "1"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cars/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "1"]
            },
            "description": "Deactivate car listing (doesn't delete, just makes inactive)"
          }
        },
        {
          "name": "üí∞ Mark Car as Sold",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "User-Id",
                "value": "1"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cars/1/sold",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "1", "sold"]
            },
            "description": "Mark car as sold (changes status to SOLD)"
          }
        },
        {
          "name": "üë§ Get Listings by Seller",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/seller/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "seller", "1"]
            },
            "description": "Get all car listings by a specific seller (User ID 1)"
          }
        },
        {
          "name": "üè∑Ô∏è Get Available Car Makes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/makes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "makes"]
            },
            "description": "Get list of all available car makes from active listings"
          }
        },
        {
          "name": "üöó Get Models for Make",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/models?make=Toyota",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "models"],
              "query": [
                {
                  "key": "make",
                  "value": "Toyota"
                }
              ]
            },
            "description": "Get all available models for a specific make"
          }
        }
      ]
    },
    {
      "name": "üîç Search",
      "description": "Car search functionality with various filters and sorting options",
      "item": [
        {
          "name": "üîç Basic Search - Keyword",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/search?keyword=toyota",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "search"],
              "query": [
                {
                  "key": "keyword",
                  "value": "toyota"
                }
              ]
            },
            "description": "Search cars by keyword (searches in make, model, description)"
          }
        },
        {
          "name": "üîç Advanced Search - All Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/search?keyword=toyota&minYear=2018&maxYear=2022&minPrice=15000&maxPrice=30000&make=Toyota&condition=EXCELLENT&fuelType=Gasoline&transmission=Automatic&location=Sydney&sortBy=price&sortDirection=ASC&page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "search"],
              "query": [
                {
                  "key": "keyword",
                  "value": "toyota"
                },
                {
                  "key": "minYear",
                  "value": "2018"
                },
                {
                  "key": "maxYear",
                  "value": "2022"
                },
                {
                  "key": "minPrice",
                  "value": "15000"
                },
                {
                  "key": "maxPrice",
                  "value": "30000"
                },
                {
                  "key": "make",
                  "value": "Toyota"
                },
                {
                  "key": "condition",
                  "value": "EXCELLENT"
                },
                {
                  "key": "fuelType",
                  "value": "Gasoline"
                },
                {
                  "key": "transmission",
                  "value": "Automatic"
                },
                {
                  "key": "location",
                  "value": "Sydney"
                },
                {
                  "key": "sortBy",
                  "value": "price"
                },
                {
                  "key": "sortDirection",
                  "value": "ASC"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Advanced search with all available filters and sorting"
          }
        },
        {
          "name": "üí∞ Search by Price Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/search?minPrice=10000&maxPrice=25000&sortBy=price&sortDirection=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "search"],
              "query": [
                {
                  "key": "minPrice",
                  "value": "10000"
                },
                {
                  "key": "maxPrice",
                  "value": "25000"
                },
                {
                  "key": "sortBy",
                  "value": "price"
                },
                {
                  "key": "sortDirection",
                  "value": "DESC"
                }
              ]
            }
          }
        },
        {
          "name": "üìÖ Search by Year Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars/search?minYear=2019&maxYear=2021&sortBy=year&sortDirection=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars", "search"],
              "query": [
                {
                  "key": "minYear",
                  "value": "2019"
                },
                {
                  "key": "maxYear",
                  "value": "2021"
                },
                {
                  "key": "sortBy",
                  "value": "year"
                },
                {
                  "key": "sortDirection",
                  "value": "DESC"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üíæ Saved Searches",
      "description": "Manage saved search criteria for buyers",
      "item": [
        {
          "name": "üíæ Create Saved Search",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "3",
                "description": "Bob Johnson - Buyer"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Affordable Toyota Cars\",\n  \"make\": \"Toyota\",\n  \"maxPrice\": 25000,\n  \"minYear\": 2017,\n  \"emailNotifications\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/saved-searches",
              "host": ["{{baseUrl}}"],
              "path": ["api", "saved-searches"]
            },
            "description": "Create a saved search for User 3 (Bob - Buyer)"
          }
        },
        {
          "name": "üíæ Create Another Saved Search",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Luxury Sedans Under 30k\",\n  \"make\": \"Honda\",\n  \"model\": \"Civic\",\n  \"maxPrice\": 30000,\n  \"minYear\": 2018,\n  \"condition\": \"EXCELLENT\",\n  \"emailNotifications\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/saved-searches",
              "host": ["{{baseUrl}}"],
              "path": ["api", "saved-searches"]
            }
          }
        },
        {
          "name": "üìã Get All Saved Searches",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/saved-searches",
              "host": ["{{baseUrl}}"],
              "path": ["api", "saved-searches"]
            },
            "description": "Get all saved searches for the current user"
          }
        },
        {
          "name": "üîç Get Saved Search by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/saved-searches/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "saved-searches", "1"]
            },
            "description": "Get specific saved search by ID"
          }
        },
        {
          "name": "‚úèÔ∏è Update Saved Search",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Toyota Search\",\n  \"make\": \"Toyota\",\n  \"maxPrice\": 30000,\n  \"minYear\": 2018,\n  \"emailNotifications\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/saved-searches/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "saved-searches", "1"]
            }
          }
        },
        {
          "name": "üóëÔ∏è Delete Saved Search",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/saved-searches/2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "saved-searches", "2"]
            }
          }
        }
      ]
    },
    {
      "name": "‚ù§Ô∏è Favorites",
      "description": "Manage favorite car listings for buyers",
      "item": [
        {
          "name": "‚ù§Ô∏è Add Car to Favorites",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "User-Id",
                "value": "3",
                "description": "Bob Johnson - Buyer"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favourites/cars/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favourites", "cars", "1"]
            },
            "description": "Add car ID 1 to favorites for User 3 (Bob)"
          }
        },
        {
          "name": "‚ù§Ô∏è Add Another Car to Favorites",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favourites/cars/2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favourites", "cars", "2"]
            },
            "description": "Add car ID 2 to favorites"
          }
        },
        {
          "name": "üíî Remove Car from Favorites",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favourites/cars/2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favourites", "cars", "2"]
            },
            "description": "Remove car ID 2 from favorites"
          }
        },
        {
          "name": "üìã Get User's Favorite Cars",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favourites?page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favourites"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Get all favorite cars for the current user"
          }
        },
        {
          "name": "‚ùì Check if Car is Favorited",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favourites/cars/1/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favourites", "cars", "1", "status"]
            },
            "description": "Check if car ID 1 is in user's favorites"
          }
        },
        {
          "name": "üî¢ Get Favorites Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Id",
                "value": "3"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favourites/count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favourites", "count"]
            },
            "description": "Get total number of favorite cars for user"
          }
        }
      ]
    },
    {
      "name": "üß™ Testing Workflow",
      "description": "Recommended testing sequence",
      "item": [
        {
          "name": "1Ô∏è‚É£ Step 1 - Verify Service is Running",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/h2-console",
              "host": ["{{baseUrl}}"],
              "path": ["h2-console"]
            },
            "description": "‚úÖ Verify service is running and H2 console is accessible\n\nüîó Should open H2 database console\n\nIf this fails, start the service with: mvn spring-boot:run"
          }
        },
        {
          "name": "2Ô∏è‚É£ Step 2 - Test Empty Car List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cars",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars"]
            },
            "description": "üìù Should return empty list initially (before creating users/cars)"
          }
        },
        {
          "name": "3Ô∏è‚É£ Step 3 - Try Creating Car (Will Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Id",
                "value": "1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"make\": \"Test\",\n  \"model\": \"Car\",\n  \"year\": 2020,\n  \"mileage\": 10000,\n  \"condition\": \"GOOD\",\n  \"askingPrice\": 15000.00,\n  \"description\": \"Test car\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cars",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cars"]
            },
            "description": "‚ùå This will fail with 400 Bad Request because User ID 1 doesn't exist yet\n\nüîß After this fails, go to H2 Console and create users using the SQL from Database Setup folder"
          }
        }
      ]
    }
  ]
}